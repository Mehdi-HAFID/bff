scheme: http
hostname: localhost

reverse-proxy-port: 7080
reverse-proxy-uri: ${scheme}://${hostname}:${reverse-proxy-port}

authorization-server-prefix: /auth
issuer: ${reverse-proxy-uri}${authorization-server-prefix}


client-id: client
client-secret: secret

bff-port: 7081
bff-prefix: /bff

react-prefix: /react-ui

resource-server-port: 4003

logout:
  auth-server-uri: ${reverse-proxy-uri}/auth/connect/logout
  token-hint-param-name: id_token_hint
  post-redirect-param-name: post_logout_redirect_uri
  client-id-param-name: client_id
  success-redirect-header: X-POST-LOGOUT-SUCCESS-URI
  success-redirect-default-uri: ${reverse-proxy-uri}${react-prefix}


server:
  port: ${bff-port}
  forward-headers-strategy: framework

spring:
  cloud:
    gateway:
      server:
        webflux:
          routes:
            - id: bff
              uri: ${scheme}://${hostname}:${resource-server-port}
              predicates:
                - Path=/api/**
              filters:
                - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
                - TokenRelay=
                - SaveSession
                - StripPrefix=1
  security:
    oauth2:
      client:
        provider:
          token-generator:
            issuer-uri: ${issuer}
        registration:
          token-generator:
            provider: token-generator
            authorization-grant-type: authorization_code
            client-id: ${client-id}
            client-secret: ${client-secret}
            scope: openid
            redirect-uri: ${reverse-proxy-uri}${bff-prefix}/login/oauth2/code/token-generator

trace: true